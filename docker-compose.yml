name: postgres-service

services:
  postgres:
    image: postgres:13
    container_name: postgres-db
    hostname: postgres-db
    restart: always
    volumes:
      # - postgres_data:/var/lib/postgresql/data
      - ./db-samples/dvdrental.tar:/docker-entrypoint-initdb.d/dvdrental.tar
      - ./db-samples/restore-dvdrental.sh:/docker-entrypoint-initdb.d/restore-dvdrental.sh
    ports:
      - ${DATABASE_PORT}:5432
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - postgres-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - 5050:80
    volumes:
      - ./outs/pgadmin:/var/lib/pgadmin
      - ./db-samples/servers.json:/pgadmin4/servers.json
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - postgres-network

networks:
  postgres-network:
    driver: bridge
# volumes:
#   postgres_data:
